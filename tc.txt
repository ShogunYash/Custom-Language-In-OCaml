/* Basic token test */
-1;
1/-1;
let a := 5;
let b := 3;
let bool_var := true;
Print(a);
Input("data.txt");
Print("");
if a = b then let c := a; else let c := b; end

// Test all operators
let  int_add := 5 + 3;
let    float_add := 5.0 +. 3.0;
let    int_sub := 5 /- 3;
let    float_sub := 5.0 -. 3.0;
let    int_mult := 5 * 3;
let    float_mult := 5.0 *. 3.0;
let    int_div := 5 / 3;
let    float_div := 5.0 /. 3.0;
let    modulo := 5 mod 3;
let    float_mod := 5.0 mod_float 3.0;
let    abs_val := abs(-5);

// Test comparison operators
let eq_test := 5 = 3;
let neq_test := 5 ~= 3;
let lt_test := 5 < 3;
let gt_test := 5 > 3;
let leq_test := 5 <= 3;
let geq_test := 5 >= 3;

// Test logical operators
let and_test := true && false;
let or_test := true || false;
let not_test := ~true;

/* Integer Vector Tests */
// 1D vector
1
[5];

// 2D vector
2
[3,4];

// 3D vector
3
[1,2,3];

// 5D vector
5
[10,20,30,40,50];

/* Float Vector Tests */
// 2D float vector
2
[3.14,2.71];

// 3D float vector with scientific notation
3
[1.0e6,2.5e-3,3.33];

/* Integer Matrix Tests */
// 1x1 matrix
1,1
[[5]];

// 2x2 matrix
2,2
[[1,2],[3,4]];

// 2x3 matrix
2,3
[[1,2,3],[4,5,6]];

// 3x2 matrix
3,2
[[1,2],[3,4],[5,6]];

/* Float Matrix Tests */
// 2x2 float matrix
2,2
[[1.1,2.2],[3.3,4.4]];

// Matrix with scientific notation
2,2
[[1.0e3,2.0e3],[3.0e3,4.0e3]];

/* Vector operations */
// Define vectors with dimensions

let  v1 := 
3
[1,2,3];

let v2 := 
3
[4,5,6];

// Vector addition
3;
let v_sum := v1 + v2;  // Should be [5, 7, 9]

// Vector dot product
let dot_prod := v1 * v2;  // Should be 32

// Vector magnitude
let mag_v1 := mag(v1);  // Should be sqrt(14)

/* Matrix operations */
// Define matrices with dimensions

let m1 := 
2,2
[[1,2],[3,4]];

let m2 := 
2,2
[[5,6],[7,8]];

// Matrix addition
let m_sum := m1 + m2;  // Should be [[6, 8], [10, 12]]

// Matrix multiplication
let m_prod := m1 * m2;  // Should be [[19, 22], [43, 50]]

// Matrix transpose
let m_trans := trp(m1);  // Should be [[1, 3], [2, 4]]

// Matrix determinant
let det_m1 := det(m1);  // Should be -2

/* Dimension mismatch tests */
// Vector dimension mismatch
4;  // Declares vector with 4 elements
let v_mismatch :=
4
[1,2,3];  // But only provides 3 - should error

// Matrix dimension mismatch
// Declares 3x2 matrix
let m_mismatch := 
3,2
[[1,2],[3,4]];  // But only provides 2 rows - should error

// Matrix row length mismatch // Declares 2x3 matrix
let m_row_mismatch := 
2,3
[[1,2,3],[4,5]];  // Second row too short - should error

/* Control flow tests */
// If-then-else
let x := 1;
let y := 3;
if x > 0 then {
    y := x * 2;
} else {
    y := x * -1;
}end

let m_r_mis := 
2,3
[[1,2,3],[4,5]];  // Second row too short - should error

/* Control flow tests */
// If-then-else
if x > 0 then {
    y := x * 2;
} else {
    y := x * -1;
}end

// For loop
let sum := 0;
for i := 1 to 10 do {
    sum := sum + i;
}end

// While loop with vector dimension
let v := 
3
[10,20,30];

// Single line comment test


/* Multi-line
   comment test
   with multiple lines */
   
b := 10;
/* Nested /* comment */ test */
let c := 15;

/* Edge cases */
// Very large integers
let big_int := 1234567890;

// Very large float with scientific notation
let big_float := 1.234567890e+38;

// Very small float with scientific notation
let small_float := 1.234567890e-38;

// Unterminated string
let unterminated := "This string has no end";

// Unterminated comment
/* This comment isn't closed */

/* Complete program test */
// Program to compute matrix inverse determinant
let A := 
2,2
[[4,7],[2,6]];

let det_A := det(A);

if det_A = 0 then {
    Print("Matrix is singular");
} else {
    let result := 1 / det_A;
    Print("Inverse determinant:");
    Print(result);
}end

let v_n := 
5
[10,20,30,40,50];
sum := 0;

let xy := 0;
for i := 0 to 4 do {
    xy := v_n[i];
    Print(xy);
    sum := sum + xy;
}end

let average := sum / 5;
Print("Average of vector elements:");
Print(average);

// Test epsilon for floating-point comparison
if abs(average /- 30) > 0 then {
    Print("Average is approximately 30");
}end
